# This project was developed by Jaime Rios
# You can contact me at https://github.com/papaponmx
# https://riosjaime.com or hola@riosjaime.com

# v1.9.0

# JavaScript
'.source.js':
  'Console log':
    'prefix': 'log'
    'body': 'console.log(${1:msg})';
  'Annonymous function':
    'prefix': 'anfn'
    'body': """(${1:params}) => {
      $2
       }"""
  'Named function':
    'prefix': 'nfn'
    'body': 'const ${1:functionName} = (${2:params}) => { $3 }'
  'function':
    'prefix': 'fn'
    'body': """function ${1:functionName} (${2:params}) {
        $3
       }"""
  'Import snippet':
    'prefix': 'imp'
    'body': """import ${1:ModuleName} from '${2:Module}';"""
  'Import destructured':
    'prefix': 'imd'
    'body': """import { ${1:destructuredModule} } from '${2:module}'"""
  'Import Everything':
    'prefix': 'ime'
    'body': """import * as ${1:alias} from '${2:module}"""
  'For of loop':
    'prefix': 'fof'
    'body': """ for(let ${1:itemName} of ${2:iterable} {
      ${3}
    }
    """
  'For in loop':
    'prefix': 'fin'
    'body': """for(let ${1:itemName} in ${2:iterable} {
      $3
   }"""
  'Method':
    'prefix': 'met'
    'body': """ ${1:methodName} = (${2:params}) => { $3 }
    """
  'setTimeOut function':
    'prefix': 'seto'
    'body': """setTimeout(($2) => {
      $3
      }, ${1:timeOut});
    """
  'new Promise':
    'prefix': 'npro'
    'body': 'new Promise((${1:resolve}, ${2:reject}) => )'

# React
  'React Component Snipet':
    'prefix': 'rcc'
    'body': """import React, { Component } from 'react';

export default class ${1:componentName} extends Component {
  render() {
    return (
      <div>
        $2
      </div>
    )
  }
}
    """
  'componentWillMount method':
    'prefix': 'cpwm'
    'body': """componentWillMount($1) {
      $2
      }
    """
# React Redux
  'mapStateToProps funtion':
    'prefix': 'mapSta'
    'body': """const mapStateToProps= state => ({
        $1
      });
    """
  'mapDispatchToProps funtion':
    'prefix': 'mapDisp'
    'body': """const mapDispatchToProps = (dispatch) => ({
        $1
      });
    """

  'Component with redux':
    'prefix': 'rcredux'
    'body': """
import React, { Component } from 'react';
import { connect } from 'react-redux';

export class ${1:componentName} extends Component {

  render() {
    return (
      <div>

      </div>
    )
  }
}

const mapStateToProps = (state) => ({

});

const mapDispatchToProps = (dispatch) => ({

})

export default connect(mapStateToProps, mapDispatchToProps)(${1:componentName});
    """
# Redux
  'Redux conts':
    'prefix': 'rxconst'
    'body': """export const ${1:constName} = '${1:constName}';"""
  'Snippet Name':
    'prefix': 'rxaction'
    'body': """export const ${1:actionName} = (action) => ({
    type: type,
    payload: action.payload
  });
    """
  'redux-saga Generator Function':
    'prefix': 'rxgen'
    'body': """ export function* ${1:workerName}Saga() {

    }
    """
  'Redux reducer':
    'prefix': 'rxreducer'
    'body': """export default (state = { }, action) => {
  switch (action.type) {

  case typeName:
    return { ...state }

  default:
    return state
  }
}"""
